{"version":3,"sources":["Recipe.js","Loading.js","App.js","serviceWorker.js","Header.js","index.js","food.module.css"],"names":["Recipe","title","image","calory","ingredients","url","label","Diet","healthLabels","className","style","food","src","alt","Math","round","map","i","key","ingredient","index","text","href","target","rel","role","Loading","aria-hidden","App","useState","allRecipe","setRecipe","search","setSearch","query","setQuery","loaded","setLoaded","useEffect","getRecipe","a","fetch","responce","json","finalData","hits","onSubmit","e","preventDefault","alert","type","value","onChange","placeholder","r","recipe","calories","dietLabels","time","totalTime","Boolean","window","location","hostname","match","Header","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.b9d94017.chunk.js","sourcesContent":["import React from \"react\";\nimport style from './food.module.css';\n\n\nconst Recipe = ({ title, image, calory, ingredients, url, label, Diet, healthLabels, ...rest }) => {\n  \n\n\n  return (\n    \n    <div className={style.food}>\n      <img className={style.image} src={image} alt={label}></img>\n     <div className=\"card-body\">\n      <h1>{title}</h1>\n      <p className=\"calory\">Calories : {Math.round(calory)}</p>\n      <p> {Diet}</p>\n      <div> {healthLabels.map((label, i) => (\n      <li className = \"health-labels\" key = {i} >{label}</li>))}\n      </div>\n     \n      <ul>\n        {ingredients.map((ingredient, index) => (\n          <li key={index}>{ingredient.text}</li>\n        ))}\n      </ul>\n      \n    </div>\n      <a href={url} target=\"_blank\" className=\"btn btn-warning\" rel=\"noopener noreferrer\" role=\"button\">Recipe Details</a>\n      </div>\n  );\n  \n}\nexport default Recipe;\n","import React from 'react';\n\nconst Loading = () => {\n    return (\n        <div>\n            <h1 className=\"text-center\"><i className=\"fad fa-spinner fa-spin\" aria-hidden=\"true\"></i>&nbsp;Loading...</h1>\n        </div>\n    );\n}\n\nexport default Loading","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\nimport Loading from './Loading';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nfunction App() {\n  const API_ID = \"6f5d20b7\";\n  const API_KEY = \"c6a7010f0b54b7531de51f291a650dcb\";\n\n  const [allRecipe, setRecipe] = useState([]);\n  const[search,setSearch]=useState(\"\");\n  const [query, setQuery]=useState('lemon');\n  const [loaded, setLoaded] = useState(true);\n\n  useEffect(() => {\n    getRecipe();\n  }, [query]);\n\n  const getRecipe = async () => {\n   \n\n    const responce = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`\n    );\n    const finalData = await responce.json();\n    setRecipe(finalData.hits);\n    setLoaded(true);\n    setSearch('');\n    \n    \n  }; \n  const updateSearch = e =>{\n    setSearch(e.target.value)\n  }; \n  const getSearch = e =>{\n    e.preventDefault();\n    if (!search){\n     alert ('Please enter a valid food!')\n      \n    } else {\n    setQuery(search);\n    setLoaded(false);\n    setSearch('');\n   \n    }\n  } \n\n  \n  return (\n    \n    <div className=\"App\">\n    \n    \n      <form onSubmit={getSearch} className=\"form\">\n        <input type=\"text\" className=\"input mt-5\" value={search} onChange={updateSearch} placeholder=\"Search for a recipe...\"></input>\n        <button type=\"submit\" className=\"search mt-5\">Search</button>\n      \n      </form>\n      <h4 className=\"text-center mt-5 mb-3 text-muted\">The Most Loved Recipes</h4>\n      <div className=\"d-flex justify-content-around flex-wrap\">\n        \n      {(() => {\n            switch (loaded) {\n              case true: return (\n                allRecipe.map((r) => (\n                  <Recipe\n                    key={r.recipe.label}\n                    title={r.recipe.label}\n                    label={r.recipe.label}\n                    calory={r.recipe.calories}\n                    Diet={r.recipe.dietLabels}\n                    healthLabels={r.recipe.healthLabels}\n                    time={r.recipe.totalTime}\n                    image={r.recipe.image}\n                    ingredients={r.recipe.ingredients}\n                    url={r.recipe.url}\n                  />\n\n                ))\n              )\n              case false: return (<Loading />)\n              default: return (<Loading />)\n            }\n          })()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport \"./App.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"header-container\">\n            <h1 className=\"text-center\">Favourite Cooking Book</h1>\n        </div>\n    );\n}\n\nexport default Header","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport * as serviceWorker from './serviceWorker';\nimport Header from './Header';\n\nReactDOM.render(\n  <React.StrictMode>\n<Header />\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"food\":\"food_food__2iiWI\",\"image\":\"food_image__3rvT6\"};"],"sourceRoot":""}